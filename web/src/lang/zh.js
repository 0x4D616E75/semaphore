export default {
  incorrectUsrPwd: '用户名或密码错误',
  askDeleteUser: '您确定要删除此用户吗？',
  askDeleteTemp: '您确实要删除此模板吗？',
  askDeleteEnv: '您确实要删除此环境吗？',
  askDeleteInv: '您确实要删除此主机配置吗？',
  askDeleteKey: '您确定要删除此密钥吗？',
  askDeleteRepo: '您确定要删除此存储库吗？',
  askDeleteProj: '您确定要删除此项目吗?',
  askDeleteTMem: '您确定要删除此团队成员吗？',
  edit: '编辑',
  nnew: '新建',
  keyFormSshKey: 'SSH 密钥',
  keyFormLoginPassword: '使用密码登录',
  keyFormNone: '无',
  incorrectUrl: 'URL地址不正确',
  username: '用户名',
  username_required: '未填写用户名',
  dashboard: '控制台',
  history: '历史',
  activity: '活动',
  settings: '设置',
  signIn: '登录',
  password: '密码',
  changePassword: '更改密码',
  editUser: '编译用户',
  newProject: '新建项目',
  close: '关闭',
  newProject2: '新建项目...',
  demoMode: 'DEMO MODE',
  task: '任务 #{expr}',
  youCanRunAnyTasks: '您可以运行任何任务',
  youHaveReadonlyAccess: '您只有只读访问权限',
  taskTemplates: '任务模板',
  inventory: '主机配置',
  environment: '环境',
  keyStore: '密钥库',
  repositories: '存储库',
  darkMode: '暗色模式',
  team: '团队',
  users: '用户',
  editAccount: '账户编辑',
  signOut: '注销',
  error: '错误',
  refreshPage: '刷新页面',
  relogin: '重新登录',
  howToFixSigninIssues: '如何解决登录问题',
  firstlyYouNeedAccessToTheServerWhereSemaphoreRunni: '首先，您需要登录运行 Semaphore 的服务器。',
  executeTheFollowingCommandOnTheServerToSeeExisting: '在服务器上执行以下命令查看现有用户：',
  semaphoreUserList: 'semaphore user list',
  youCanChangePasswordOfExistingUser: '您可以更改现有用户的密码：',
  semaphoreUserChangebyloginLoginUser123Password: 'semaphore user change-by-login --login user123 --password {makePasswordExample}',
  orCreateNewAdminUser: '或者创建新的管理员用户：',
  close2: '关闭',
  semaphore: 'SEMAPHORE',
  dontHaveAccountOrCantSignIn: '没有帐户或无法登录？',
  password2: '密码',
  cancel: '关闭',
  noViews: '没有分组视图',
  addView: '新增分组视图',
  editEnvironment: '编辑环境',
  deleteEnvironment: '删除环境',
  environment2: '环境',
  newEnvironment: '新增环境',
  environmentName: '环境名称',
  extraVariables: '扩展变量',
  enterExtraVariablesJson: '添加额外的Json格式变量...',
  environmentVariables: '环境变量',
  enterEnvJson: '添加额外的Json格式环境变量...',
  environmentAndExtraVariablesMustBeValidJsonExample: '环境变量和额外变量必须是有效的 JSON。例如：',
  dashboard2: '控制台',
  ansibleSemaphore: 'Ansible Semaphore',
  wereSorryButHtmlwebpackpluginoptionstitleDoesntWor: '抱歉，如果未启用 JavaScript，<%= htmlWebpackPlugin.options.title %> 将无法正常工作。请启用它以继续。',
  deleteInventory: '删除主机配置',
  newInventory: '新增主机配置',
  name: '名称',
  userCredentials: '用户凭据',
  sudoCredentialsOptional: 'Sudo 凭据（可选）',
  type: '类型',
  pathToInventoryFile: '主机配置文件路径',
  enterInventory: '编辑主机配置...',
  staticInventoryExample: '静态主机配置示例:',
  staticYamlInventoryExample: '静态 YAML 格式主机配置示例:',
  keyName: '凭据名称',
  loginOptional: '登录名 (可选)',
  usernameOptional: '用户名 (可选)',
  privateKey: '私钥',
  override: '覆盖',
  useThisTypeOfKeyForHttpsRepositoriesAndForPlaybook: '对于 HTTPS 存储库和使用非 SSH 连接的 playbook，请使用此类密钥。',
  deleteKey: '删除凭据',
  newKey: '新增凭据',
  create: '创建',
  newTask: '创建任务',
  cantDeleteThe: '无法删除 {objectTitle}',
  theCantBeDeletedBecauseItUsedByTheResourcesBelow: '无法删除 {objectTitle}，因为它已被如下资源使用',
  projectName: '项目名称',
  allowAlertsForThisProject: '在此项目开启通知',
  telegramChatIdOptional: 'Telegram Chat ID (可选)',
  maxNumberOfParallelTasksOptional: '最大并行任务数 (可选)',
  deleteRepository: '删除存储库',
  newRepository: '新增存储库',
  urlOrPath: 'URL 或路径',
  absPath: 'abs. path',
  branch: '分支',
  accessKey: '访问凭证',
  credentialsToAccessToTheGitRepositoryItShouldBe: '访问 Git 存储库的凭据。它应该是:',
  ifYouUseGitOrSshUrl: '如果您使用 Git 或 SSH URL.',
  ifYouUseHttpsOrFileUrl: '如果您使用 HTTPS 或文件 URL.',
  none: 'None',
  ssh: 'SSH',
  deleteProject: '删除项目',
  save: '保存',
  deleteProject2: '删除项目',
  onceYouDeleteAProjectThereIsNoGoingBackPleaseBeCer: '一旦删除项目，就无法恢复！！！',
  name2: '名称 *',
  title: '标题 *',
  description: '说明',
  required: '必需',
  key: '{expr}',
  surveyVariables: '列出变量',
  addVariable: '添加变量',
  columns: '列',
  buildVersion: '编译版本',
  messageOptional: '说明 (可选)',
  debug: '调试模式',
  dryRun: 'Dry Run',
  diff: '显示差异',
  advanced: 'Advanced',
  hide: 'Hide',
  pleaseAllowOverridingCliArgumentInTaskTemplateSett: 'Please allow overriding CLI argument in Task Template settings',
  cliArgsJsonArrayExampleIMyinventoryshPrivatekeythe: 'CLI Args (JSON array). Example: [ "-i", "@myinventory.sh", "--private-key=/there/id_rsa", "-vvvv" ]',
  started: 'Started',
  author: 'Author',
  duration: 'Duration',
  stop: 'Stop',
  deleteTeamMember: 'Delete team member',
  team2: 'Team',
  newTeamMember: 'New Team Member',
  user: 'User',
  administrator: 'Administrator',
  definesStartVersionOfYourArtifactEachRunIncrements: 'Defines start version of your artifact. Each run increments the artifact version.',
  forMoreInformationAboutBuildingSeeThe: 'For more information about building, see the',
  taskTemplateReference: 'Task Template reference',
  definesWhatArtifactShouldBeDeployedWhenTheTaskRun: 'Defines what artifact should be deployed when the task run.',
  forMoreInformationAboutDeployingSeeThe: 'For more information about deploying, see the',
  taskTemplateReference2: 'Task Template reference',
  definesAutorunSchedule: 'Defines autorun schedule.',
  forMoreInformationAboutCronSeeThe: 'For more information about cron, see the',
  cronExpressionFormatReference: 'Cron expression format reference',
  startVersion: 'Start Version',
  example000: 'Example: 0.0.0',
  buildTemplate: 'Build Template',
  autorun: 'Autorun',
  playbookFilename: 'Playbook Filename *',
  exampleSiteyml: 'Example: site.yml',
  inventory2: 'Inventory *',
  repository: 'Repository *',
  environment3: 'Environment *',
  vaultPassword: 'Vault Password',
  vaultPassword2: 'Vault Password',
  view: 'View',
  cron: 'Cron',
  iWantToRunATaskByTheCronOnlyForForNewCommitsOfSome: 'I want to run a task by the cron only for for new commits of some repository',
  repository2: 'Repository',
  cronChecksNewCommitBeforeRun: 'Cron checks new commit before run',
  readThe: 'Read the',
  toLearnMoreAboutCron: 'to learn more about Cron.',
  suppressSuccessAlerts: 'Suppress success alerts',
  cliArgsJsonArrayExampleIMyinventoryshPrivatekeythe2: 'CLI Args (JSON array). Example: [ "-i", "@myinventory.sh", "--private-key=/there/id_rsa", "-vvvv" ]',
  allowCliArgsInTask: 'Allow CLI args in Task',
  docs: 'docs',
  editViews: 'Edit Views',
  newTemplate: 'New template',
  taskTemplates2: 'Task Templates',
  all: 'All',
  notLaunched: 'Not launched',
  by: 'by {user_name} {formatDate}',
  editTemplate: 'Edit Template',
  newTemplate2: 'New Template',
  deleteTemplate: 'Delete template',
  playbook: 'Playbook',
  email: 'Email',
  adminUser: 'Admin user',
  sendAlerts: 'Send alerts',
  deleteUser: 'Delete user',
  newUser: 'New User',
  re: 'Re{getActionButtonTitle}',
  teamMember: '{expr} Team Member',
  taskId: 'Task ID',
  version: 'Version',
  status: 'Status',
  start: 'Start',
  actions: 'Actions',
  alert: 'Alert',
  admin: 'Admin',
  role: 'Role',
  external: 'External',
  time: 'Time',
  path: 'Path',
  gitUrl: 'Git URL',
  sshKey: 'SSH Key',
  lastTask: 'Last Task',
  task2: 'Task',
  build: 'Build',
  deploy: 'Deploy',
  run: 'Run',
  add: 'Add',
  password_required: 'Password is required',
  name_required: 'Name is required',
  user_credentials_required: 'User credentials are required',
  type_required: 'Type is required',
  path_required: 'Path to Inventory file is required',
  private_key_required: 'Private key is required',
  project_name_required: 'Project name is required',
  repository_required: 'Repository is required',
  branch_required: 'Branch is required',
  key_required: 'Key is required',
  user_required: 'User is required',
  build_version_required: 'Build version is required',
  title_required: 'Title is required',
  isRequired: 'is required',
  mustBeInteger: 'Must be integer',
  mustBe0OrGreater: 'Must be 0 or greater',
  start_version_required: 'Start version is required',
  playbook_filename_required: 'Playbook filename is required',
  inventory_required: 'Inventory is required',
  environment_required: 'Environment is required',
  email_required: 'Email is required',
  build_template_required: 'Build template is required',
  Task: 'Task',
  Build: 'Build',
  Deploy: 'Deploy',
  Run: 'Run',

};
